---
import Layout from "../layouts/Layout.astro";
import { Charts } from "../components/charts/Charts";
import { groupedVendors } from "../models/vendor";
import { AirlinePartner, EurobonusShopPartner } from "../models/partners";
import type { Transaction } from "../models/transaction";
import type { Profile } from "../models/profile";
import { calculateTotalBonusPoints } from "../helpers/calculations";

const profiles: Profile[] = [
  { id: "1", display_name: "James" },
  { id: "2", display_name: "Michael" },
  { id: "3", display_name: "Mary" },
  { id: "4", display_name: "Robert" },
];

const allVendors = Object.values(groupedVendors).flatMap((x) => x);

const generateRandomDate = (start: Date, end: Date) => {
  return new Date(
    start.getTime() + Math.random() * (end.getTime() - start.getTime())
  );
};

const generateRandomTransaction = (
  profileId: string,
  vendors: string[],
  isNegative = false
): Transaction => {
  const date = generateRandomDate(new Date(2018, 0, 1), new Date(2025, 11, 31));
  const vendor = vendors[Math.floor(Math.random() * vendors.length)];
  let bonusPoints = Math.floor(Math.random() * 10000) + 1;

  if (Object.values(AirlinePartner).includes(vendor as AirlinePartner)) {
    bonusPoints = Math.floor(Math.random() * 100) + 1;
  } else if (
    Object.values(EurobonusShopPartner).includes(vendor as EurobonusShopPartner)
  ) {
    bonusPoints = Math.floor(Math.random() * 500) + 1;
  } else if (vendor.includes("MasterCard") || vendor.includes("Amex")) {
    bonusPoints = Math.floor(Math.random() * 50000) + 1;
  }

  if (isNegative) {
    bonusPoints = -500000;
  }

  return {
    user_id: profileId,
    date: date.toISOString(),
    activity: vendor,
    bonus_points: bonusPoints,
    level_points: Math.floor(Math.random() * 1000),
    profile_id: profileId,
  };
};

const transactions: Transaction[] = [];

profiles.forEach((profile) => {
  for (let i = 0; i < 500; i++) {
    transactions.push(generateRandomTransaction(profile.id, allVendors));
  }
  for (let year = 2018; year <= 2025; year++) {
    transactions.push({
      user_id: profile.id,
      date: new Date(year, 0, 1).toISOString(),
      activity: "Copenhagen - Chicago | SK Business",
      bonus_points: Math.floor(Math.random() * -100000) - 75000,
      profile_id: profile.id,
    });
  }
});

const sum = calculateTotalBonusPoints(transactions);
---

<Layout title="Showcase">
  <h1>Showcase</h1>
  <p>
    You've earned a total of {sum.toLocaleString()} eurobonus points
  </p>
  <Charts transactions={transactions} profiles={profiles} client:load />
</Layout>
