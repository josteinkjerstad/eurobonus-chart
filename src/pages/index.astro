---
export const prerender = false;
export const metadata = {
  verification: {
    google: "1svCa-wULEr04P-grA9_q6v8l1XvdT-6wZEWt7K0qfE",
  },
};
import { EurobonusCharts } from "../components/charts/eurobonus/EurobonusCharts";
import Layout from "../layouts/Layout.astro";
import { createServerClient, parseCookieHeader } from "@supabase/ssr";
import { AirlinePartner, EuroBonusShopPartner } from "../models/partners";
import type { Profile } from "../models/profile";
import type { Transaction } from "../models/transaction";
import { groupedVendors } from "../models/vendor";
const { cookies, redirect, request } = Astro;
const supabase = createServerClient(import.meta.env.SUPABASE_URL, import.meta.env.SUPABASE_KEY, {
  cookies: {
    getAll() {
      return parseCookieHeader(request.headers.get("Cookie") ?? "");
    },
    setAll(cookiesToSet) {
      cookiesToSet.forEach(({ name, value, options }) => cookies.set(name, value, options));
    },
  },
});

const { data } = await supabase.auth.getSession();

if (data.session) {
  return redirect("/dashboard");
}

const profiles: Profile[] = [
  { id: "1", display_name: "James", created: new Date(2025, 1, 20).toISOString(), user_id: "1", periode_start_month: 1 },
  { id: "2", display_name: "Michael", created: new Date(2025, 1, 21).toISOString(), parent_id: "1", periode_start_month: 5 },
  { id: "3", display_name: "Mary", created: new Date(2025, 1, 22).toISOString(), parent_id: "1", periode_start_month: 9 },
  { id: "4", display_name: "Robert", created: new Date(2025, 1, 23).toISOString(), parent_id: "1", periode_start_month: 12 },
];

const allVendors = Object.values(groupedVendors).flatMap(x => x);

const generateRandomDate = (start: Date, end: Date) => {
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
};

const generateRandomTransaction = (profileId: string, vendors: string[], isNegative = false): Transaction => {
  const date = generateRandomDate(new Date(2018, 0, 1), new Date(2025, 11, 31));
  const vendor = vendors[Math.floor(Math.random() * vendors.length)];
  let bonusPoints = Math.floor(Math.random() * 10000) + 1;

  if (Object.values(AirlinePartner).includes(vendor as AirlinePartner)) {
    bonusPoints = Math.floor(Math.random() * 100) + 1;
  } else if (Object.values(EuroBonusShopPartner).includes(vendor as EuroBonusShopPartner)) {
    bonusPoints = Math.floor(Math.random() * 500) + 1;
  } else if (vendor.includes("MasterCard") || vendor.includes("Amex")) {
    bonusPoints = Math.floor(Math.random() * 50000) + 1;
  }

  if (isNegative) {
    bonusPoints = -500000;
  }

  return {
    user_id: "1",
    date: date.toISOString(),
    activity: vendor,
    bonus_points: bonusPoints,
    level_points: Math.floor(Math.random() * 1000),
    profile_id: profileId,
  };
};

const transactions: Transaction[] = [];

profiles.forEach(profile => {
  for (let i = 0; i < 500; i++) {
    transactions.push(generateRandomTransaction(profile.id, allVendors));
  }
  for (let year = 2018; year <= 2025; year++) {
    transactions.push({
      user_id: "1",
      date: new Date(year, 0, 1).toISOString(),
      activity: "Copenhagen - Chicago | SK Business",
      bonus_points: Math.floor(Math.random() * -100000) - 75000,
      profile_id: profile.id,
    });
  }
});
---

<Layout title="Showcase" {metadata}>
  <h1>Showcase</h1>
  <EurobonusCharts transactions={transactions} profiles={profiles} hideTable client:load />
</Layout>
